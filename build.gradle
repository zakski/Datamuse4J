/* Standard plugins documentation is available here https://docs.gradle.org/current/userguide/standard_plugins.html. */
buildscript {
    dependencies { classpath 'org.eclipse.jgit:org.eclipse.jgit:3.2.0.201312181205-r' }
}

plugins {
    id 'idea' // intellij ide support
    id 'java' // standard java library plugin
    id 'signing' // support for signing the java lib jars
    id 'nebula.maven-publish' version '17.0.0' // plugin to publish in maven style

    // TODO figure out better automation for scm info
    id 'nebula.maven-scm' version '17.0.0'
    id 'nebula.info-scm' version '9.3.0'

    id 'nebula.javadoc-jar' version '17.0.0' // plugin to create javadocs jar
    id 'nebula.source-jar' version '17.0.0' // plugin to create source jar
    id "nebula.release" version "15.3.1" // plugin to provide semantic versioning
}
apply from: file("versions.gradle")

/* Equivalent to groupid and version in maven, artifactid is set in settings.gradle.  */
group 'com.szadowsz'
description = "Datamuse4J is a handler for calling the Datamuse RESTful API."

repositories {
    mavenCentral()
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

test {
    useJUnitPlatform()
}

/**
 * Task to generate the javadoc folder for easy perusal on Github
 */
task generateJavadocForRepo(type: Javadoc) {
    group = 'documentation'
    classpath = project.sourceSets.main.runtimeClasspath
    source = sourceSets.main.allJava
    destinationDir = reporting.file("$projectDir/javadoc")
    dependsOn jar
}

// Don't lint the javadoc
tasks.withType(Javadoc) {
    options.addBooleanOption('Xdoclint:none', true)
}

dependencies {
    // https://mvnrepository.com/artifact/com.codesnippets4all/quick-json
    implementation group: 'com.codesnippets4all', name: 'quick-json', version: versions.quick_json
    // https://mvnrepository.com/artifact/org.slf4j/slf4j-api
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.31'
    // https://mvnrepository.com/artifact/com.squareup.retrofit2/retrofit
    implementation group: 'com.squareup.retrofit2', name: 'retrofit', version: versions.retrofit
    // https://mvnrepository.com/artifact/com.squareup.retrofit2/converter-jackson
    implementation group: 'com.squareup.retrofit2', name: 'converter-jackson', version: versions.retrofit

    // https://mvnrepository.com/artifact/org.junit.platform/junit-platform-launcher
    testImplementation group: 'org.junit.platform', name: 'junit-platform-launcher', version: versions.junit_platform
    // https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-engine
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: versions.junit_jupiter
    // https://mvnrepository.com/artifact/org.slf4j/slf4j-log4j12
    testImplementation group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.31'
    // https://mvnrepository.com/artifact/log4j/log4j
    testImplementation group: 'log4j', name: 'log4j', version: '1.2.17'
}

artifacts {
    archives javadocJar, sourcesJar
}

signing {
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign configurations.archives
}

publishing {
    publications {
        nebula(MavenPublication) {
            pom {
                url = 'https://github.com/zakski/Datamuse4J'
                licenses {
                    license {
                        name = 'GNU LESSER GENERAL PUBLIC LICENSE, Version 2.1'
                        url = 'https://www.gnu.org/licenses/old-licenses/lgpl-2.1.en.html'
                        distribution = 'repo'
                    }
                }
                developers {
                    developer {
                        id = 'zakski'
                        email = 'zak.szadowski@gmail.com'
                        organization='szadowsz'
                        organizationUrl = 'https://szadowsz.com'
                    }
                }
                scm {
                    connection ='scm:git@github.com:zakski/Datamuse4j.git'
                    developerConnection = 'scm:git@github.com:zakski/Datamuse4j.git'
                }
            }
         }
    }
    repositories {
        maven {
            name "SonatypeStaging"
            url "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username = project.ossrhUsername
                password = project.ossrhPassword
            }
        }
        maven {
            name "SonatypeSnapshot"
            url "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            credentials {
                username = project.ossrhUsername
                password = project.ossrhPassword
            }
        }
    }
}